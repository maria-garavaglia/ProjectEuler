/*
 * Copyright (C) 2017 tyler.garavaglia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package projecteuler.problems;

/**
 * @Number: 2
 * @Title: Even Fibonacci Numbers
 * @Description: "Each new term in the Fibonacci sequence is generated by adding
 * the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the
 * Fibonacci sequence whose values do not exceed four million, find the sum of
 * the even-valued terms."
 * @Link: https://projecteuler.net/problem=2
 *
 * @author tyler.garavaglia
 */
public class Problem2 implements EulerSolvable {

    public Problem2() {

    }

    @Override
    public void printHeader() {
        System.out.println("Problem 2: Even Fibonacci Numbers");
        System.out.println("Task: By considering the terms in the Fibonacci "
                + "sequence whose values do not exceed four million, find the "
                + "sum of the even-valued terms.");
    }

    @Override
    public void execute() {
        int sum = 0;

        for (int count = 1; count < 4000000; count++) {
            if (isFibonacci(count) && count % 2 == 0) {
                sum += count;
            }
        }

        System.out.println("Result: " + sum);
    }

    private boolean isFibonacci(int number) {
        //TODO: optimize by storing previous fibonacci numbers
        int fib0 = 1;
        int fib1 = 2;

        while (fib1 <= number) {
            if (fib1 == number) {
                return true;
            } else {
                int nextFib = fib0 + fib1;
                fib0 = fib1;
                fib1 = nextFib;
            }
        }
        return false;
    }
}
